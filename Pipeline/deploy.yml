name: Java CI

on:
  push:
    branches:
      - 'master'  # Runs on pushes to all branches,  Ideally this can be limited to specific branches. if the test is long running.
  pull_request:
    branches:
      - master  # Runs on pull requests to all branches,
  env:
    IMAGE_NAME: 'what-time-is-it'
    PROJECT_ID: 'project-id'
    ARTIFACT_REGION: 'europe-west3'
    REPOSITORY: 'repo-name'
    CLOUD_RUN_NAME: 'what-time-is-it'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Read Java version from .java-version
      - name: Read Java version
        id: java_version
        run: |
          JAVA_VERSION=$(cat .java-version)
          echo "java-version=$JAVA_VERSION" >> $GITHUB_ENV

      # Step 3: Set up Java using the version from .java-version
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.java-version }}
          distribution: 'temurin'

      # Step 4: Cache Maven dependencies (optional for faster builds)
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 5: Build the project
      - name: Build and test
        run: ./mvnw clean verify
  build-and-push-image:
    name: Build and Push Image
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          token_format: 'access_token'
          project_id: ${{ env.PROJECT_ID }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}

      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.ARTIFACT_REGION }}-docker.pkg.dev'

      - name: Build and Push Container
        run: |-
          docker build -t "${{ env.ARTIFACT_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" ./
          docker push "${{ env.ARTIFACT_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"

  deploy-to-cloud-run:
    name: Deploy to Cloud Run
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - uses: 'actions/checkout@v4'

    - name: Google Auth
      id: auth
      uses: 'google-github-actions/auth@v2'
      with:
        token_format: 'access_token'
        project_id: ${{ env.PROJECT_ID }}
        service_account: ${{ secrets.SERVICE_ACCOUNT }}
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}

    - name: deploy
      uses: 'google-github-actions/deploy-cloudrun@v2'
      with:
        service: ${{ env.CLOUD_RUN_NAME }}
        image: '${{ env.ARTIFACT_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}'

